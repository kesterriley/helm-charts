application:
  # Number of replicas to create
  replicaCount: 3
  # Delay when deploying before we start running liveness checks (bringing the service online)
  minReadySeconds: 90

  image:
    # Location of the container image for the actual application
    repository: eu.gcr.io/example/example
    # The version of the application
    tag: 0.0.0
    # Image pull policy (see https://kubernetes.io/docs/concepts/containers/images/#updating-images)
    pullPolicy: Always

  # The Kubernetes secret used to allow pulling the image from a private image registry.
  # This defaults to a blank string so that it is not used by default.
  imagePullSecretName: "qtc-systems"

  readinessProbe:
    httpGet:
      # The path within the container to use for probing
      path: /
      # The port within the container to use for probing
      port: 80
    # Delay before probe is initiated in seconds
    initialDelaySeconds: 30
    # When the probe times out in seconds
    timeoutSeconds: 30
    # Minimum consecutive failures for the probe
    failureThreshold: 24

  livenessProbe:
    httpGet:
      # The path within the container to use for probing
      path: /
      # The port within the container to use for probing
      port: 80
    # Delay before probe is initiated in seconds
    initialDelaySeconds: 30
    # When the probe times out in seconds
    timeoutSeconds: 30
    # Minimum consecutive failures for the probe
    failureThreshold: 24

  container:
    # The port the container runs on
    port: 80

  # A list of Pod annotations.
  podAnnotations:
    # Prometheus Port to scrape.
    prometheus.io/port: "80"
    # Enable scraping from prometheus
    prometheus.io/scrape: "true"
    # Path for Prometheus to scrape
    prometheus.io/path: "/metrics"

  # A list of deployment annotations
  annotations: {}

  service:
    # A list of service annotations
    annotations: {}

  # Allow assigning pods to nodes (see https://kubernetes.io/docs/concepts/configuration/assign-pod-node/)
  nodeSelector: {}

  # Ensure pods are scheduled to appropriate nodes (see https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/)
  tolerations: []
   # - key: CriticalAddonsOnly
   #  operator: Exists

  # Extra environment variables that will be passed into pods
  env: {}
  #  key: value
  #  key: value

  # Extra environment variables (from existing secrets) that will be passed into pods
  envFromSecret: []
  # - name: SPRING_DATASOURCE_URL
  #   secretName: app-secret
  #   secretKeyRef: first-key

  resources:
    limits: {}
      # CPU resource limit (see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu)
      # cpu: "1.0"
      # Memory resource limit (see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory)
      # memory: 1024Mi
    requests: {}
      # CPU resource request (see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-cpu)
      # cpu: 200m
      # Memory resource request (see https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/#meaning-of-memory)
      # memory: 1024Mi

  autoscaling:
    # Toggle on and off whether to enable the pod autoscaler
    enabled: false
    # The minimum number of replicas allowed
    minReplicas: 2
    # The maximum number of replicas allowed
    maxReplicas: 5
    # The CPU usage threshold percentage before autoscaling
    targetCPUUtilizationPercentage: 80
     # The memory usage threshold percentage before autoscaling
    targetMemoryUtilizationPercentage: 80

  ingress:
    # A toggle to enable ingress
    enabled: false
    rootPath: '/'
    tls:
      # A toggle to enable tls
      enabled: true
      # An optional secret which can specify the private key and certificate (See https://kubernetes.io/docs/concepts/services-networking/ingress/)
      secret: {}
    # The tls hostname
    host: example.example.co.uk
#    annotations:
#      cert-manager.io/cluster-issuer: "letsencrypt"
#      kubernetes.io/tls-acme: "true"
#      nginx.ingress.kubernetes.io: ""

    # Additional paths to map in ingress (See values for for example)
    additionalPaths: []
#      - path: "/api"
#        serviceName: xyz
#        servicePort: 80

  # Files to inject into containers for configuration. See (https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/)
  configMaps: []
#  - ops-tool-client:
#      data:
#        default.conf: |
#          server {
#              listen       80;
#              server_name  ops-tool-client;
#
#              location / {
#                  root /usr/share/nginx/html;
#                  try_files $uri /index.html;
#              }
#
#              location /sw.js {
#                  add_header Cache-Control "no-cache";
#                  proxy_cache_bypass $http_pragma;
#                  proxy_cache_revalidate on;
#                  expires off;
#                  access_log off;
#              }
#
#              location /api/ {
#                  proxy_pass {{ .Values.client.configuration.serverEndpoint }};
#              }
#          }

  ## Secret mounts & volume mounts
  # Defines mounts with secrets. Secrets must be manually created in the namespace.
  volumes:
    # Toggle on and off the usage of volumes within the pod
    enabled: false
    # Location to mount secrets
    secretVolumeMounts: []
  #   - name: secret-files
  #     path: /etc/secrets
  #   - name: secret-files
  #     path: /etc/secrets

    # Map secrets to volumes. (See  https://kubernetes.io/docs/concepts/storage/volumes/)
    secretVolumes: []
  #   - name: secret-files
  #     secretName: some-secret-files
  #   - name: secret-files
  #     secretName: some-secret-files

    # Additional config map volume mounts (see values.yaml for an example)
    configMapVolumeMounts: []
    #      - name: config-map-files
    #        path: /etc/config

    # Additional config map volumes (see values.yaml for an example)
    configMapVolumes: []
  #    - name: config-map-files
  #      configMapName: config-map-name

    # Additional volume mounts for emptyDir's
    emptyDirVolumeMounts: []
#      - name: config-map-files
#        path: /etc/config

    # A list of emptyDir volumes
    emptyDirVolumes: []
#      - name: testing
#      - name: testing123


# The security contexts at the pod level
podSecurityContext: {}
#  runAsNonRoot: true
#  runAsUser: 1000
#  runAsGroup: 1000
#  fsGroup: 1000

# The security contexts at the individual container level
securityContexts:
  application: {}
#    allowPrivilegeEscalation: false
#    readOnlyRootFilesystem: true
