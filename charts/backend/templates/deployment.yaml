apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app_name: {{ .Release.Name }}
    app_version: {{ .Values.application.image.tag }}
  annotations:
    reloader.stakater.com/auto: "true"
spec:
  minReadySeconds: {{ .Values.application.minReadySeconds }}
  revisionHistoryLimit: 2
  replicas: {{ .Values.application.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app_name: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app_name: {{ .Release.Name }}
        app_version: {{ .Values.application.image.tag }}
  {{- with .Values.application.podAnnotations }}
      annotations:
{{ toYaml . | indent 8 }}
  {{- end }}
    spec:
      serviceAccountName: {{ .Release.Name }}
{{- with .Values.application.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with .Values.application.tolerations }}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app_name
                  operator: In
                  values:
                  - {{ .Release.Name }}
              topologyKey: topology.kubernetes.io/zone
      imagePullSecrets:
      {{- if .Values.application.imagePullSecretName }}
        - name: {{ .Values.application.imagePullSecretName }}
      {{- else }}
        - name: {{ .Release.Name }}-image-pull-secret
      {{- end }}
      {{- if .Values.podSecurityContext }}
      securityContext:
{{ toYaml .Values.podSecurityContext | indent 8 }}
      {{- end }}
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.application.image.repository }}:{{ .Values.application.image.tag }}
          imagePullPolicy: {{ .Values.application.image.pullPolicy }}
          {{- if .Values.securityContexts.application }}
          securityContext:
{{ toYaml .Values.securityContexts.application | indent 12 }}
          {{- end }}
          env:
          {{- range $key, $value := .Values.application.env }}
          - name: "{{ $key }}"
            value: "{{ $value }}"
          {{- end }}
          {{- range $secret := .Values.application.envFromSecret }}
          - name: "{{ $secret.name }}"
            valueFrom:
              secretKeyRef:
                name: {{ $secret.secretName }}
                key: {{ $secret.secretKeyRef }}
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.application.container.port }}
          livenessProbe:
{{ toYaml .Values.application.livenessProbe | indent 12 }}
          readinessProbe:
{{ toYaml .Values.application.readinessProbe | indent 12 }}
          resources:
{{ toYaml .Values.application.resources | indent 12 }}
{{- if .Values.application.volumes.enabled }}
          volumeMounts:
            {{- range $volumeMount := .Values.application.volumes.secretVolumeMounts }}
            - name: "{{ $volumeMount.name }}"
              mountPath: "{{ $volumeMount.path }}"
              readOnly: true
            {{- end }}
            {{- range $volumeMount := .Values.application.volumes.configMapVolumeMounts }}
            - name: "{{ $volumeMount.name }}"
              mountPath: "{{ $volumeMount.path }}"
              subPath: "{{ $volumeMount.subPath }}"
              readOnly: true
            {{- end }}
            {{- range $volumeMount := .Values.application.volumes.emptyDirVolumeMounts }}
            - name: "{{ $volumeMount.name }}"
              mountPath: "{{ $volumeMount.path }}"
            {{- end }}
      volumes:
        {{- range $volume := .Values.application.volumes.secretVolumes }}
        - name: "{{ $volume.name }}"
          secret:
            secretName: "{{ $volume.secretName }}"
        {{- end }}
        {{- range $volume := .Values.application.volumes.configMapVolumes }}
        - name: "{{ $volume.name }}"
          configMap:
            name: "{{ $volume.configMapName }}"
        {{- end }}
        {{- range $volume := .Values.application.volumes.emptyDirVolumes }}
        - name: {{ $volume.name }}
          emptyDir: {}
        {{- end }}
{{- end -}}
